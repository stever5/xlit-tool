# kk_en_ic.py
import re
from .utils import apply_replacements, apply_regex_replacements

regex_patterns = (
    (re.compile(r"Ғ[Ғғ]"), "Ғ"),
    (re.compile(r"ғ[Ғғ]"), "ғ"),
    (re.compile(r"Ж[Жж]"), "Ж"),
    (re.compile(r"ж[Жж]"), "ж"),
    (re.compile(r"Ң[Ңң]"), "Ң"),
    (re.compile(r"ң[Ңң]"), "ң"),
    (re.compile(r"Х[Хх]"), "Х"),
    (re.compile(r"х[Хх]"), "х"),
    (re.compile(r"Ц[Цц]"), "Ц"),
    (re.compile(r"ц[Цц]"), "ц"),
    (re.compile(r"Ч[Чч]"), "Ч"),
    (re.compile(r"ч[Чч]"), "ч"),
    (re.compile(r"Ш[Шш]"), "Ш"),
    (re.compile(r"ш[Шш]"), "ш"),
    (re.compile(r"Щ[Щщ]"), "Щ"),
    (re.compile(r"щ[Щщ]"), "щ"),
)

char_map = {
    "А": "A",
    "а": "a",
    "Ә": "A",
    "ә": "a",
    "Б": "B",
    "б": "b",
    "В": "V",
    "в": "v",
    "Г": "G",
    "г": "g",
    "Ғ": "Gh",
    "ғ": "gh",
    "Д": "D",
    "д": "d",
    "Е": "E",
    "е": "e",
    "Ё": "Yo",
    "ё": "yo",
    "Ж": "Zh",
    "ж": "zh",
    "З": "Z",
    "з": "z",
    "И": "I",
    "и": "i",
    "Й": "Y",
    "й": "y",
    "К": "K",
    "к": "k",
    "Қ": "Q",
    "қ": "q",
    "Л": "L",
    "л": "l",
    "М": "M",
    "м": "m",
    "Н": "N",
    "н": "n",
    "Ң": "Ng",
    "ң": "ng",
    "О": "O",
    "о": "o",
    "Ө": "O",
    "ө": "o",
    "П": "P",
    "п": "p",
    "Р": "R",
    "р": "r",
    "С": "S",
    "с": "s",
    "Т": "T",
    "т": "t",
    "У": "U",
    "у": "u",
    "Ұ": "U",
    "ұ": "u",
    "Ү": "U",
    "ү": "u",
    "Ф": "F",
    "ф": "f",
    "Х": "Kh",
    "х": "kh",
    "Һ": "H",
    "һ": "h",
    "Ц": "Ts",
    "ц": "ts",
    "Ч": "Ch",
    "ч": "ch",
    "Ш": "Sh",
    "ш": "sh",
    "Щ": "Shch",
    "щ": "shch",
    "Ъ": "",
    "ъ": "",
    "Ы": "Y",
    "ы": "y",
    "І": "I",
    "і": "i",
    "Ь": "",
    "ь": "",
    "Э": "E",
    "э": "e",
    "Ю": "Yu",
    "ю": "yu",
    "Я": "Ya",
    "я": "ya",
}

def transliterate(src_text: str) -> str:
    """Return transliterated string"""
    src_text = apply_regex_replacements(src_text, regex_patterns)
    src_text = apply_replacements(src_text, char_map)
    return src_text
